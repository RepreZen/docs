#!/bin/bash -e

if [[ $1 == "-f" ]] ; then
    force=true
elif [[ $1 == "-qa" ]] ; then
    repo=${2-docs-qa}
    force=true
fi

function fail() {
    echo "$*" >&2
    exit 1
}

function warn() {
    echo "$*" >&2
}

function check-git-state() {
    if [[ $force ]] ; then
	warn "Working tree checks suppressed... this command may do nothing at all or something you do not expect"
	return
    fi

    branch=$(git rev-parse --abbrev-ref HEAD)
    if [[ $branch != master ]] ; then
	fail "Must publish from master branch or use -f"
    fi

    git update-index -q --refresh
    if ! git diff-index --quiet HEAD ; then
	fail "Your working tree has uncommitted changes; commit first or use -f"
    fi

    if [[ ! -z "$(git ls-files --exclude-standard --others)" ]] ; then
	fail "Your working tree includes untracked and unignored files; commit or clean them first, or use -f"
    fi

    git fetch --quiet
    working=$(git rev-parse @)     # @ = current branch head (see git rev-parse help)
    origin=$(git rev-parse @{u})   # @{u} = head of remote (upstream) branch for current branch
    if [[ $working != $origin ]]; then
	fail "Your working tree is not in sync with the origin; push/pull first as needed, or use -f"
    fi
}

function copyrepo() {
    mkdir -p /tmp/git
    rm -rf "/tmp/git/$repo"
    (   
	cd /tmp/git/
	git clone "git@github.com:RepreZen/$repo"
	cd "$repo"
	for x in * .??* ; do
	    if [[ "$x" != .git ]] ; then rm -rf $x ; fi
	done
	if [[ "$(git branch --list dummy)" ]] ; then git branch -D dummy ; fi
	if [[ "$(git ls-remote origin dummy)" ]] ; then git push origin :dummy ; fi
	if [[ "$(git ls-remote origin gh-pages)" ]] ; then git push origin :gh-pages ; fi
	git checkout -b dummy
    )
    git archive $(git rev-parse @) | tar xCfp "/tmp/git/$repo" -
    (
	cd "/tmp/git/$repo"
	echo "/$repo" > _data/baseurl.yml
	jekyll build
	git add .
	git commit -m 'site copy'
	git push --set-upstream origin dummy
    )
}

cd $(git rev-parse --show-toplevel)

check-git-state

rm -rf _site
jekyll build

check-git-state

if [[ $repo ]] ; then
    copyrepo $repo
    cd "/tmp/git/$repo"
fi

git subtree push --prefix _site origin gh-pages
